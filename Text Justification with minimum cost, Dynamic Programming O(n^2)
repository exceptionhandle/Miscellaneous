class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int L) {
        if(L == 0 and words.empty()) return {""};
        int n = words.size();
        vector<vector<int>> memoize(n, vector<int>(n, INT_MAX));
        vector<int> sz;
        int sum = 0;
        for(auto& s : words)
        {
            sum += s.size();
            sz.push_back(sum);
        }
        for(int i = 0; i < words.size(); i++)
        {
            memoize[i][i] = (L - words[i].size())*(L - words[i].size());
        }
        for(int len = 2; len < n; len++)
        {
            for(int i = 0; i <= n-len; i++)
            {
                int j = i + len;
                int tot = 0;
                int lenth = (L - (sz[j-1] - ((i==0)?0:sz[i-1]) + (j-i-1)));
          //      cout<<"memoization "<<lenth<<" "<<i<<" "<<j<<" "<<(sz[j-1] - ((i==0)?0:sz[i-1]) + (j-i-1))<<endl;
                if(lenth < 0) continue;
            //    cout<<"I came"<<endl;
                memoize[i][j-1] = lenth*lenth;
            }
        }
        vector<long> miniCost(n, INT_MAX), next(n, 0);
        for(int i = n-1; i >= 0; i--)
        {
            for(int j = n; j > i; j--)
            {
                cout<<"size before cost : "<<(sz[j-1]-sz[i-1]+(j-i-1))<<endl;
                if(L < (sz[j-1]-sz[i-1]+(j-i-1))) continue;
                long ans = memoize[i][j-1] + ((j >= n)?0:miniCost[j]);
                    cout<<"mincost "<<i<<" "<<(j)<<" "<<ans<<" "<<miniCost[j]<<endl;
                if(ans < miniCost[i])
                {
                    miniCost[i] = ans;
                    next[i] = j;
                }
            }
            cout<<"MIN " <<next[i]<<endl;
        }
        vector<string> ans;
        int i = 0;
        while(i < n)
        {
            int j = next[i];
                cout<<i << " "<<n<< " "<<j<<endl;

            string str = "";
            int remain = L - (sz[j-1] - (i==0?0:sz[i-1]));
            int lnth = ((j-i-1)==0)?1:(j-i-1);
            int spaces = remain/lnth;
            int extra = remain-(spaces*lnth);
            cout<<remain<<" "<<extra<<" "<<spaces<<endl;
            while(i < j and i < n)
            {
                str += words[i++];
                if(j == n and (remain > 0))
                {
                    str += " ";
                    remain--;
                }
                else
                {
                    for(int x = 0 ; (x < spaces) and (remain > 0); x++, remain--)
                    {
                    cout<<"spaces"<<" "<<spaces<<" "<<extra<<" "<<remain<<" "<<x<<endl;
                        str += " ";
                    }
                    if(extra)
                    {
                        cout<<"yaha"<<endl;
                        str += " ";
                        extra--;
                        remain -= 1;
                    }
                }
            }
            cout<<remain<<endl;
            for(int x = 0; x < remain; x++)
            {
                str += " ";
            }
            ans.push_back(str);
        }
        return ans;
    }
};
