{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Keshpupcanary"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/createDelta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string,\n\t\tColumn_47 as string,\n\t\tColumn_48 as string,\n\t\tColumn_49 as string,\n\t\tColumn_50 as string,\n\t\tColumn_51 as string,\n\t\tColumn_52 as string,\n\t\tColumn_53 as string,\n\t\tColumn_54 as string,\n\t\tColumn_55 as string,\n\t\tColumn_56 as string,\n\t\tColumn_57 as string,\n\t\tColumn_58 as string,\n\t\tColumn_59 as string,\n\t\tColumn_60 as string,\n\t\tColumn_61 as string,\n\t\tColumn_62 as string,\n\t\tColumn_63 as string,\n\t\tColumn_64 as string,\n\t\tColumn_65 as string,\n\t\tColumn_66 as string,\n\t\tColumn_67 as string,\n\t\tColumn_68 as string,\n\t\tColumn_69 as string,\n\t\tColumn_70 as string,\n\t\tColumn_71 as string,\n\t\tColumn_72 as string,\n\t\tColumn_73 as string,\n\t\tColumn_74 as string,\n\t\tColumn_75 as string,\n\t\tColumn_76 as string,\n\t\tColumn_77 as string,\n\t\tColumn_78 as string,\n\t\tColumn_79 as string,\n\t\tColumn_80 as string,\n\t\tColumn_81 as string,\n\t\tColumn_82 as string,\n\t\tColumn_83 as string,\n\t\tColumn_84 as string,\n\t\tColumn_85 as string,\n\t\tColumn_86 as string,\n\t\tColumn_87 as string,\n\t\tColumn_88 as string,\n\t\tColumn_89 as string,\n\t\tColumn_90 as string,\n\t\tColumn_91 as string,\n\t\tColumn_92 as string,\n\t\tColumn_93 as string,\n\t\tColumn_94 as string,\n\t\tColumn_95 as string,\n\t\tColumn_96 as string,\n\t\tColumn_97 as string,\n\t\tColumn_98 as string,\n\t\tColumn_99 as string,\n\t\tColumn_100 as string,\n\t\tColumn_101 as string,\n\t\tColumn_102 as string,\n\t\tColumn_103 as string,\n\t\tColumn_104 as string,\n\t\tColumn_105 as string,\n\t\tColumn_106 as string,\n\t\tColumn_107 as string,\n\t\tColumn_108 as string,\n\t\tColumn_109 as string,\n\t\tColumn_110 as string,\n\t\tColumn_111 as string,\n\t\tColumn_112 as string,\n\t\tColumn_113 as string,\n\t\tColumn_114 as string,\n\t\tColumn_115 as string,\n\t\tColumn_116 as string,\n\t\tColumn_117 as string,\n\t\tColumn_118 as string,\n\t\tColumn_119 as string,\n\t\tColumn_120 as string,\n\t\tColumn_121 as string,\n\t\tColumn_122 as string,\n\t\tColumn_123 as string,\n\t\tColumn_124 as string,\n\t\tColumn_125 as string,\n\t\tColumn_126 as string,\n\t\tColumn_127 as string,\n\t\tColumn_128 as string,\n\t\tColumn_129 as string,\n\t\tColumn_130 as string,\n\t\tColumn_131 as string,\n\t\tColumn_132 as string,\n\t\tColumn_133 as string,\n\t\tColumn_134 as string,\n\t\tColumn_135 as string,\n\t\tColumn_136 as string,\n\t\tColumn_137 as string,\n\t\tColumn_138 as string,\n\t\tColumn_139 as string,\n\t\tColumn_140 as string,\n\t\tColumn_141 as string,\n\t\tColumn_142 as string,\n\t\tColumn_143 as string,\n\t\tColumn_144 as string,\n\t\tColumn_145 as string,\n\t\tColumn_146 as string,\n\t\tColumn_147 as string,\n\t\tColumn_148 as string,\n\t\tColumn_149 as string,\n\t\tColumn_150 as string,\n\t\tColumn_151 as string,\n\t\tColumn_152 as string,\n\t\tColumn_153 as string,\n\t\tColumn_154 as string,\n\t\tColumn_155 as string,\n\t\tColumn_156 as string,\n\t\tColumn_157 as string,\n\t\tColumn_158 as string,\n\t\tColumn_159 as string,\n\t\tColumn_160 as string,\n\t\tColumn_161 as string,\n\t\tColumn_162 as string,\n\t\tColumn_163 as string,\n\t\tColumn_164 as string,\n\t\tColumn_165 as string,\n\t\tColumn_166 as string,\n\t\tColumn_167 as string,\n\t\tColumn_168 as string,\n\t\tColumn_169 as string,\n\t\tColumn_170 as string,\n\t\tColumn_171 as string,\n\t\tColumn_172 as string,\n\t\tColumn_173 as string,\n\t\tColumn_174 as string,\n\t\tColumn_175 as string,\n\t\tColumn_176 as string,\n\t\tColumn_177 as string,\n\t\tColumn_178 as string,\n\t\tColumn_179 as string,\n\t\tColumn_180 as string,\n\t\tColumn_181 as string,\n\t\tColumn_182 as string,\n\t\tColumn_183 as string,\n\t\tColumn_184 as string,\n\t\tColumn_185 as string,\n\t\tColumn_186 as string,\n\t\tColumn_187 as string,\n\t\tColumn_188 as string,\n\t\tColumn_189 as string,\n\t\tColumn_190 as string,\n\t\tColumn_191 as string,\n\t\tColumn_192 as string,\n\t\tColumn_193 as string,\n\t\tColumn_194 as string,\n\t\tColumn_195 as string,\n\t\tColumn_196 as string,\n\t\tColumn_197 as string,\n\t\tColumn_198 as string,\n\t\tColumn_199 as string,\n\t\tColumn_200 as string,\n\t\tColumn_201 as string,\n\t\tColumn_202 as string,\n\t\tColumn_203 as string,\n\t\tColumn_204 as string,\n\t\tColumn_205 as string,\n\t\tColumn_206 as string,\n\t\tColumn_207 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'adhocextract',\n\tfolderPath: 'deltaFolder',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tquizReport as ({@version} as short, {@xmlns} as string, {@xmlns:xsi} as string, {@xsi:schemaLocation} as string, groups as (group as ({@answeredQuestions} as short, {@awardedPercent} as double, {@awardedScore} as short, {@name} as string, {@passingPercent} as short, {@passingScore} as short, {@totalQuestions} as short)[]), questions as (fillInTheBlankQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correct} as boolean, {@userAnswer} as string, answer as string[])[], text as string[]), direction as (text as string), feedback as (text as string))[], hotspotQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, direction as (text as string), feedback as (text as string), hotspots as (freeform as ({@correct} as boolean, {@height} as double, {@label} as string, {@marked} as boolean, {@points} as string, {@width} as double, {@x} as double, {@y} as double)[]), userAnswer as (point as ({@x} as double, {@y} as double)[]))[], matchingQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, direction as (text as string), feedback as (text as string), matches as (match as ({@premiseIndex} as short, {@responseIndex} as short)[]), premises as (premise as (text as string)[]), responses as (response as (text as string)[]), userAnswer as (match as ({@premiseIndex} as short, {@responseIndex} as short)[]))[], multipleChoiceQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as boolean, answer as (text as string)[]), direction as (text as string), feedback as (text as string))[], multipleChoiceTextQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as short, answer as string[])[], text as string[]), direction as (text as string), feedback as (text as string))[], multipleResponseQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as (answer as ({@correct} as boolean, {@selected} as boolean, text as string)[]), direction as (text as string), feedback as (text as string))[], numericQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, {@userAnswer} as short, answers as (equal as short), direction as (text as string), feedback as (text as string))[], sequenceQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as (answer as ({@originalIndex} as short, text as string)[]), direction as (text as string), feedback as (text as string))[], trueFalseQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as boolean, answer as (text as boolean)[]), direction as (text as string), feedback as (text as string))[], typeInQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, {@userAnswer} as string, acceptableAnswers as (answer as string[]), direction as (text as string), feedback as (text as string))[], wordBankQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correct} as boolean, {@userAnswer} as string, {_value_} as string)[], text as string[]), direction as (text as string), feedback as (text as string), words as string)[]), quizSettings as ({@maxNormalizedScore} as short, {@maxScore} as short, {@quizType} as string, {@timeLimit} as boolean, passingPercent as short), summary as ({@finishTimestamp} as timestamp, {@passed} as boolean, {@percent} as short, {@score} as short, {@time} as short, variables as (variable as ({@name} as string, {@title} as string, {@value} as string))))\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFilename',\n\tformat: 'xml',\n\tfileSystem: 'adhocextract',\n\tvalidationMode: 'none',\n\tnamespaces: false,\n\twildcardPaths:['*.xml']) ~> source1\nDerivedColumn1 foldDown(unroll(quizReport.questions.multipleChoiceQuestion, quizReport.questions.multipleChoiceQuestion),\n\tmapColumn(\n\t\tquestionid = quizReport.questions.multipleChoiceQuestion.{@id},\n\t\tQuestion = quizReport.questions.multipleChoiceQuestion.direction.text,\n\t\tstatus = quizReport.questions.multipleChoiceQuestion.{@status}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nsource1 derive(SourceFilename = SourceFilename,\n\t\tsubSourceFilename = toString(iifNull(toString(toTimestamp(\"2018-03-01 11:12:10.615\")),toString(currentTimestamp())))) ~> DerivedColumn1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tquizReport as ({@version} as string, {@xmlns} as string, {@xmlns:xsi} as string, {@xsi:schemaLocation} as string, groups as (group as ({@answeredQuestions} as string, {@awardedPercent} as double, {@awardedScore} as string, {@name} as string, {@passingPercent} as string, {@passingScore} as string, {@totalQuestions} as string)[]), questions as (matchingQuestion as ({@awardedPoints} as string, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as string, {@status} as string, {@usedAttempts} as boolean, direction as (text as string), feedback as (text as string), matches as (match as ({@premiseIndex} as string, {@responseIndex} as string)[]), premises as (premise as (text as string)[]), responses as (response as (text as string)[]), userAnswer as (match as ({@premiseIndex} as string, {@responseIndex} as string)[])), multipleChoiceQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as string, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as string, {@userAnswerIndex} as boolean, answer as (text as string)[]), direction as (text as string), feedback as (text as string)), multipleResponseQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as string, {@status} as string, {@usedAttempts} as boolean, answers as (answer as ({@correct} as boolean, {@selected} as boolean, text as string)[]), direction as (text as string), feedback as (text as string))[], trueFalseQuestion as ({@awardedPoints} as string, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as string, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as boolean, answer as (text as boolean)[]), direction as (text as string), feedback as (text as string))[]), quizSettings as ({@maxScore} as string, {@quizType} as string, {@timeLimit} as boolean, passingPercent as string, {@maxNormalizedScore} as string), summary as ({@passed} as boolean, {@percent} as string, {@score} as string, {@time} as string, variables as (variable as ({@name} as string, {@title} as string, {@value} as string)))),\n\t\tSourceFilename as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten2"
						},
						{
							"name": "Flatten3"
						},
						{
							"name": "Flatten4"
						},
						{
							"name": "Flatten5"
						}
					],
					"script": "source(output(\n\t\tname as string,\n\t\tage as string,\n\t\taddresses as (street as string, city as string, type as string, contact as (number as string, areaCode as string)[])[],\n\t\tfriends as (name as string, city as string, contact as (number as string, areaCode as string)[])[]\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source3\nsource3 foldDown(unroll(addresses),\n\tmapColumn(\n\t\tname,\n\t\tage,\n\t\tstreet = addresses.street,\n\t\tcity = addresses.city,\n\t\ttype = addresses.type,\n\t\tcontact = addresses.contact,\n\t\tfriends\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten2\nFlatten4 foldDown(unroll(friends, friends),\n\tmapColumn(\n\t\tname,\n\t\tage,\n\t\tstreet,\n\t\tcity,\n\t\ttype,\n\t\tnumber,\n\t\tareaCode,\n\t\t{friends.name} = friends.name,\n\t\t{friends.city} = friends.city,\n\t\tcontact = friends.contact\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten3\nFlatten2 foldDown(unroll(contact, contact),\n\tmapColumn(\n\t\tname,\n\t\tage,\n\t\tstreet,\n\t\tcity,\n\t\ttype,\n\t\tnumber = contact.number,\n\t\tareaCode = contact.areaCode,\n\t\tfriends\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten4\nFlatten3 foldDown(unroll(contact, contact),\n\tmapColumn(\n\t\tname,\n\t\tage,\n\t\tstreet,\n\t\tcity,\n\t\ttype,\n\t\t{address.number} = number,\n\t\t{address.areaCode} = areaCode,\n\t\t{friends.name},\n\t\t{friends.city},\n\t\tnumber = contact.number,\n\t\tareaCode = contact.areaCode\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten5\nFlatten5 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "first",
								"type": "DatasetReference"
							},
							"name": "CurrentJSONStream"
						},
						{
							"dataset": {
								"referenceName": "second",
								"type": "DatasetReference"
							},
							"name": "StagingJSONStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "SinkDelta"
						}
					],
					"transformations": [
						{
							"name": "RowHashCurrent"
						},
						{
							"name": "RowHashStaging"
						},
						{
							"name": "GetDeltaRecords"
						}
					],
					"script": "source(output(\n\t\tACCNUMBER as string,\n\t\tSEQNUMBER as string,\n\t\tTRANSTYPE as string,\n\t\tCONSULTDATE as string,\n\t\tENTRYDATE as string,\n\t\tBANKSLIPNUMBER as string,\n\t\tSTATEMENTNUMBER as string,\n\t\tBATCHNUMBER as string,\n\t\tPATNUMBER as string,\n\t\tPATIENTNAME as string,\n\t\tTHIRDPARTYNUMBER as string,\n\t\tDESCRIPTION1 as string,\n\t\tDESCRIPTION2 as string,\n\t\tDESCRIPTION3 as string,\n\t\tDESCRIPTION4 as string,\n\t\tREFERENCE as string,\n\t\tHICAPSREFERENCE as string,\n\t\tITEMCODE as string,\n\t\tSUBITEMCODE as string,\n\t\tFREQUENCY as double,\n\t\tDRAWERNAME as string,\n\t\tBANK as string,\n\t\tBRANCH as string,\n\t\tCONSULTDRNUMBER as string,\n\t\tCONSULTDRNAME as string,\n\t\tBILLDRNUMBER as string,\n\t\tPRINTDATE as string,\n\t\tDELETEDATE as string,\n\t\tDELETED as string,\n\t\tCANCELLED as string,\n\t\tPURGED as string,\n\t\tCANCELDATE as string,\n\t\tBANKEDDATE as string,\n\t\tBANKLOCNUMBER as string,\n\t\tBANKSTATUS as string,\n\t\tCOMMENT as string,\n\t\tUSERNUMBER as string,\n\t\tUSERNAME as string,\n\t\tUSERTIME as string,\n\t\tUSERBRANCHNUMBER as string,\n\t\tSHOWINBANKING as string,\n\t\tLOCNO as string,\n\t\tTOPRINT as string,\n\t\tONHOLD as string,\n\t\tAMOUNT as double,\n\t\tPAID as double,\n\t\tCHEQUES as double,\n\t\tCASH as double,\n\t\tCREDITCARD as double,\n\t\tEFTPOS as double,\n\t\tDIRECTDEBIT as double,\n\t\tOTHERAMOUNT as double,\n\t\tTHIRDPARTYAMOUNT as double,\n\t\tGSTAMOUNT as double,\n\t\tMARKEDAMOUNT as double,\n\t\tGSTNUMBER as string,\n\t\tLABNUMBER as string,\n\t\tCOLORNUMBER as string,\n\t\tSTARTTIME as string,\n\t\tENDTIME as string,\n\t\tMINUTES as string,\n\t\tSTATEKEY as string,\n\t\tTHIRDPARTYPAYMENT as string,\n\t\tREPRINTFLAG as string,\n\t\tRUNNUMBER as string,\n\t\tHICAPSFLAG as string,\n\t\tAUDITFLAG as string,\n\t\tPURGEUSERNAME as string,\n\t\tENTRYUSERNAME as string,\n\t\tNEWSLETTERCODE as string,\n\t\tBANKTYPE as string,\n\t\tSOUNDNUMBER as string,\n\t\tPURGEDATE as string,\n\t\tMARKEDWRITEOFF as double,\n\t\tTHIRDPARTYGSTAMOUNT as double,\n\t\tMEDCLAIMSFLAG as string,\n\t\tEASYCLAIMFLAG as string,\n\t\tHICAPSCLAIMNUMBER as string,\n\t\tHICAPS as double,\n\t\tPROCESSFLAG as string,\n\t\tENTRYUSERTIME as string,\n\t\tMEDCLAIMSKEY as string,\n\t\tMEDCLAIMSEXCLUDE as string,\n\t\tMEDCLAIMSLINENUMBER as string,\n\t\tMEDCLAIMSREFNO as string,\n\t\tMEDCLAIMSGROUPNO as string,\n\t\tMEDCLAIMSSUBGROUPNO as string,\n\t\tDELETEUSERNAME as string,\n\t\tDELETEBRANCHNUMBER as string,\n\t\tEASYCLAIMAMOUNT as double,\n\t\tMARKEDSNUMBER as string,\n\t\tSHOWINLAB as string,\n\t\tSHOWINGST as string,\n\t\tDELETETIME as string,\n\t\tSOEPAYFLAG as string,\n\t\tTRANSACTIONREFERENCE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 1000000,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> CurrentJSONStream\nsource(output(\n\t\tACCNUMBER as string,\n\t\tSEQNUMBER as string,\n\t\tTRANSTYPE as string,\n\t\tCONSULTDATE as string,\n\t\tENTRYDATE as string,\n\t\tBANKSLIPNUMBER as string,\n\t\tSTATEMENTNUMBER as string,\n\t\tBATCHNUMBER as string,\n\t\tPATNUMBER as string,\n\t\tPATIENTNAME as string,\n\t\tTHIRDPARTYNUMBER as string,\n\t\tDESCRIPTION1 as string,\n\t\tDESCRIPTION2 as string,\n\t\tDESCRIPTION3 as string,\n\t\tDESCRIPTION4 as string,\n\t\tREFERENCE as string,\n\t\tHICAPSREFERENCE as string,\n\t\tITEMCODE as string,\n\t\tSUBITEMCODE as string,\n\t\tFREQUENCY as double,\n\t\tDRAWERNAME as string,\n\t\tBANK as string,\n\t\tBRANCH as string,\n\t\tCONSULTDRNUMBER as string,\n\t\tCONSULTDRNAME as string,\n\t\tBILLDRNUMBER as string,\n\t\tPRINTDATE as string,\n\t\tDELETEDATE as string,\n\t\tDELETED as string,\n\t\tCANCELLED as string,\n\t\tPURGED as string,\n\t\tCANCELDATE as string,\n\t\tBANKEDDATE as string,\n\t\tBANKLOCNUMBER as string,\n\t\tBANKSTATUS as string,\n\t\tCOMMENT as string,\n\t\tUSERNUMBER as string,\n\t\tUSERNAME as string,\n\t\tUSERTIME as string,\n\t\tUSERBRANCHNUMBER as string,\n\t\tSHOWINBANKING as string,\n\t\tLOCNO as string,\n\t\tTOPRINT as string,\n\t\tONHOLD as string,\n\t\tAMOUNT as double,\n\t\tPAID as double,\n\t\tCHEQUES as double,\n\t\tCASH as double,\n\t\tCREDITCARD as double,\n\t\tEFTPOS as double,\n\t\tDIRECTDEBIT as double,\n\t\tOTHERAMOUNT as double,\n\t\tTHIRDPARTYAMOUNT as double,\n\t\tGSTAMOUNT as double,\n\t\tMARKEDAMOUNT as double,\n\t\tGSTNUMBER as string,\n\t\tLABNUMBER as string,\n\t\tCOLORNUMBER as string,\n\t\tSTARTTIME as string,\n\t\tENDTIME as string,\n\t\tMINUTES as string,\n\t\tSTATEKEY as string,\n\t\tTHIRDPARTYPAYMENT as string,\n\t\tREPRINTFLAG as string,\n\t\tRUNNUMBER as string,\n\t\tHICAPSFLAG as string,\n\t\tAUDITFLAG as string,\n\t\tPURGEUSERNAME as string,\n\t\tENTRYUSERNAME as string,\n\t\tNEWSLETTERCODE as string,\n\t\tBANKTYPE as string,\n\t\tSOUNDNUMBER as string,\n\t\tPURGEDATE as string,\n\t\tMARKEDWRITEOFF as double,\n\t\tTHIRDPARTYGSTAMOUNT as double,\n\t\tMEDCLAIMSFLAG as string,\n\t\tEASYCLAIMFLAG as string,\n\t\tHICAPSCLAIMNUMBER as string,\n\t\tHICAPS as double,\n\t\tPROCESSFLAG as string,\n\t\tENTRYUSERTIME as string,\n\t\tMEDCLAIMSKEY as string,\n\t\tMEDCLAIMSEXCLUDE as string,\n\t\tMEDCLAIMSLINENUMBER as string,\n\t\tMEDCLAIMSREFNO as string,\n\t\tMEDCLAIMSGROUPNO as string,\n\t\tMEDCLAIMSSUBGROUPNO as string,\n\t\tDELETEUSERNAME as string,\n\t\tDELETEBRANCHNUMBER as string,\n\t\tEASYCLAIMAMOUNT as double,\n\t\tMARKEDSNUMBER as string,\n\t\tSHOWINLAB as string,\n\t\tSHOWINGST as string,\n\t\tDELETETIME as string,\n\t\tSOEPAYFLAG as string,\n\t\tTRANSACTIONREFERENCE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 1000000,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> StagingJSONStream\nCurrentJSONStream derive(RowHash = crc32(ACCNUMBER,SEQNUMBER,TRANSTYPE,CONSULTDATE,ENTRYDATE,BANKSLIPNUMBER,STATEMENTNUMBER,BATCHNUMBER,PATNUMBER,PATIENTNAME,THIRDPARTYNUMBER,DESCRIPTION1,DESCRIPTION2,DESCRIPTION3,DESCRIPTION4,REFERENCE,HICAPSREFERENCE,HICAPSCLAIMNUMBER,ITEMCODE,SUBITEMCODE,FREQUENCY,DRAWERNAME,BANK,BRANCH,CONSULTDRNUMBER,CONSULTDRNAME,BILLDRNUMBER,PRINTDATE,DELETEDATE,DELETED,CANCELLED,PURGED,CANCELDATE,BANKEDDATE,BANKLOCNUMBER,BANKSTATUS,COMMENT,USERNUMBER,USERNAME,USERTIME,USERBRANCHNUMBER,SHOWINBANKING,LOCNO,TOPRINT,ONHOLD,AMOUNT,PAID,CHEQUES,CASH,CREDITCARD,EFTPOS,DIRECTDEBIT,HICAPS,OTHERAMOUNT,THIRDPARTYAMOUNT,GSTAMOUNT,MARKEDAMOUNT,GSTNUMBER,LABNUMBER,COLORNUMBER,STARTTIME,ENDTIME,MINUTES,STATEKEY,THIRDPARTYPAYMENT,MARKEDWRITEOFF,REPRINTFLAG,AUDITFLAG,RUNNUMBER,HICAPSFLAG,PURGEUSERNAME,ENTRYUSERNAME,PURGEDATE,THIRDPARTYGSTAMOUNT,NEWSLETTERCODE,BANKTYPE,SOUNDNUMBER,ENTRYUSERTIME,MEDCLAIMSFLAG,MEDCLAIMSKEY,MEDCLAIMSEXCLUDE,MEDCLAIMSLINENUMBER,MEDCLAIMSREFNO,MEDCLAIMSGROUPNO,MEDCLAIMSSUBGROUPNO,DELETEUSERNAME,DELETEBRANCHNUMBER,PROCESSFLAG,EASYCLAIMAMOUNT,EASYCLAIMFLAG,MARKEDSNUMBER,SHOWINLAB,SHOWINGST,DELETETIME)) ~> RowHashCurrent\nStagingJSONStream derive(RowHash = crc32(ACCNUMBER,SEQNUMBER,TRANSTYPE,CONSULTDATE,ENTRYDATE,BANKSLIPNUMBER,STATEMENTNUMBER,BATCHNUMBER,PATNUMBER,PATIENTNAME,THIRDPARTYNUMBER,DESCRIPTION1,DESCRIPTION2,DESCRIPTION3,DESCRIPTION4,REFERENCE,HICAPSREFERENCE,HICAPSCLAIMNUMBER,ITEMCODE,SUBITEMCODE,FREQUENCY,DRAWERNAME,BANK,BRANCH,CONSULTDRNUMBER,CONSULTDRNAME,BILLDRNUMBER,PRINTDATE,DELETEDATE,DELETED,CANCELLED,PURGED,CANCELDATE,BANKEDDATE,BANKLOCNUMBER,BANKSTATUS,COMMENT,USERNUMBER,USERNAME,USERTIME,USERBRANCHNUMBER,SHOWINBANKING,LOCNO,TOPRINT,ONHOLD,AMOUNT,PAID,CHEQUES,CASH,CREDITCARD,EFTPOS,DIRECTDEBIT,HICAPS,OTHERAMOUNT,THIRDPARTYAMOUNT,GSTAMOUNT,MARKEDAMOUNT,GSTNUMBER,LABNUMBER,COLORNUMBER,STARTTIME,ENDTIME,MINUTES,STATEKEY,THIRDPARTYPAYMENT,MARKEDWRITEOFF,REPRINTFLAG,AUDITFLAG,RUNNUMBER,HICAPSFLAG,PURGEUSERNAME,ENTRYUSERNAME,PURGEDATE,THIRDPARTYGSTAMOUNT,NEWSLETTERCODE,BANKTYPE,SOUNDNUMBER,ENTRYUSERTIME,MEDCLAIMSFLAG,MEDCLAIMSKEY,MEDCLAIMSEXCLUDE,MEDCLAIMSLINENUMBER,MEDCLAIMSREFNO,MEDCLAIMSGROUPNO,MEDCLAIMSSUBGROUPNO,DELETEUSERNAME,DELETEBRANCHNUMBER,PROCESSFLAG,EASYCLAIMAMOUNT,EASYCLAIMFLAG,MARKEDSNUMBER,SHOWINLAB,SHOWINGST,DELETETIME)) ~> RowHashStaging\nRowHashCurrent, RowHashStaging exists(RowHashCurrent@RowHash == RowHashStaging@RowHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> GetDeltaRecords\nGetDeltaRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> SinkDelta"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sharePointJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "toCSVinADL"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tcsvFileName as string (\"filename.csv\")\n}\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sharePointJson\nsharePointJson sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($csvFileName)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> toCSVinADL"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "xmlinput",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "xmlinput",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "jsonFileForCompare1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "SurrogateKey2"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nSurrogateKey1 derive(Column_1 = sink1#lookup(key)) ~> DerivedColumn1\nsource1 keyGenerate(output(key as long),\n\tstartAt: 1L) ~> SurrogateKey1\nsource2 keyGenerate(output(key as long),\n\tstartAt: 1L) ~> SurrogateKey2\nSurrogateKey2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['key'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1) ~> sink1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tACCNUMBER as string,\n\t\tSEQNUMBER as string,\n\t\tTRANSTYPE as string,\n\t\tCONSULTDATE as string,\n\t\tENTRYDATE as string,\n\t\tBANKSLIPNUMBER as string,\n\t\tSTATEMENTNUMBER as string,\n\t\tBATCHNUMBER as string,\n\t\tPATNUMBER as string,\n\t\tPATIENTNAME as string,\n\t\tTHIRDPARTYNUMBER as string,\n\t\tDESCRIPTION1 as string,\n\t\tDESCRIPTION2 as string,\n\t\tDESCRIPTION3 as string,\n\t\tDESCRIPTION4 as string,\n\t\tREFERENCE as string,\n\t\tHICAPSREFERENCE as string,\n\t\tHICAPSCLAIMNUMBER as string,\n\t\tITEMCODE as string,\n\t\tSUBITEMCODE as string,\n\t\tFREQUENCY as double,\n\t\tDRAWERNAME as string,\n\t\tBANK as string,\n\t\tBRANCH as string,\n\t\tCONSULTDRNUMBER as string,\n\t\tCONSULTDRNAME as string,\n\t\tBILLDRNUMBER as string,\n\t\tPRINTDATE as string,\n\t\tDELETEDATE as string,\n\t\tDELETED as string,\n\t\tCANCELLED as string,\n\t\tPURGED as string,\n\t\tCANCELDATE as string,\n\t\tBANKEDDATE as string,\n\t\tBANKLOCNUMBER as string,\n\t\tBANKSTATUS as string,\n\t\tCOMMENT as string,\n\t\tUSERNUMBER as string,\n\t\tUSERNAME as string,\n\t\tUSERTIME as string,\n\t\tUSERBRANCHNUMBER as string,\n\t\tSHOWINBANKING as string,\n\t\tLOCNO as string,\n\t\tTOPRINT as string,\n\t\tONHOLD as string,\n\t\tAMOUNT as double,\n\t\tPAID as double,\n\t\tCHEQUES as double,\n\t\tCASH as double,\n\t\tCREDITCARD as double,\n\t\tEFTPOS as double,\n\t\tDIRECTDEBIT as double,\n\t\tHICAPS as double,\n\t\tOTHERAMOUNT as double,\n\t\tTHIRDPARTYAMOUNT as double,\n\t\tGSTAMOUNT as double,\n\t\tMARKEDAMOUNT as double,\n\t\tGSTNUMBER as string,\n\t\tLABNUMBER as string,\n\t\tCOLORNUMBER as string,\n\t\tSTARTTIME as string,\n\t\tENDTIME as string,\n\t\tMINUTES as string,\n\t\tSTATEKEY as string,\n\t\tTHIRDPARTYPAYMENT as string,\n\t\tMARKEDWRITEOFF as double,\n\t\tREPRINTFLAG as string,\n\t\tAUDITFLAG as string,\n\t\tRUNNUMBER as string,\n\t\tHICAPSFLAG as string,\n\t\tPURGEUSERNAME as string,\n\t\tENTRYUSERNAME as string,\n\t\tPURGEDATE as string,\n\t\tTHIRDPARTYGSTAMOUNT as double,\n\t\tNEWSLETTERCODE as string,\n\t\tBANKTYPE as string,\n\t\tSOUNDNUMBER as string,\n\t\tENTRYUSERTIME as string,\n\t\tMEDCLAIMSFLAG as string,\n\t\tMEDCLAIMSKEY as string,\n\t\tMEDCLAIMSEXCLUDE as string,\n\t\tMEDCLAIMSLINENUMBER as string,\n\t\tMEDCLAIMSREFNO as string,\n\t\tMEDCLAIMSGROUPNO as string,\n\t\tMEDCLAIMSSUBGROUPNO as string,\n\t\tDELETEUSERNAME as string,\n\t\tDELETEBRANCHNUMBER as string,\n\t\tPROCESSFLAG as string,\n\t\tEASYCLAIMAMOUNT as double,\n\t\tEASYCLAIMFLAG as string,\n\t\tMARKEDSNUMBER as string,\n\t\tSHOWINLAB as string,\n\t\tSHOWINGST as string,\n\t\tDELETETIME as string,\n\t\tSOEPAYFLAG as string,\n\t\tTRANSACTIONREFERENCE as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureSynapseAnalytics1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'query',\n\tstore: 'synapseanalytics',\n\tquery: 'SELECT PersonID FROM dbo.Persons',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tstaged: true) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow7')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: 'adhocextract',\n\tfolderPath: 'importSchemaTestFolder') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tColID as integer,\n\t\tColGUID as string,\n\t\tColInt as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 derive(ColGUID = lower(ColGUID)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tunique as string,\n\t\tfirstcol as string,\n\t\tseccol as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flattenIssueJustPaymentsDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "psi101002_20201119_2225",
								"type": "DatasetReference"
							},
							"name": "InputJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvOutput",
								"type": "DatasetReference"
							},
							"name": "SinkChecksPayments"
						}
					],
					"transformations": [
						{
							"name": "FlattenPayments"
						}
					],
					"script": "parameters{\n\tsource_location as string ('Inbound/Raw/NCR_Pulse/Sales/Stream/Incremental/20201119/2225'),\n\ttime_stamp as string (''),\n\tdob as string (''),\n\tbatch_window as string (''),\n\tstart_time as string ('')\n}\nsource(output(\n\t\tchecks as (clears as (amount as double, createdOn as string, id as string, label as string, linkedItems as (amount as double, id as integer)[], responsibleEmployees as (employee as (id as integer, name as string)), type as string, typeId as integer)[], closed as boolean, comps as (amount as double, createdOn as string, id as integer, label as string, linkedItems as (amount as double, id as integer)[], note as string, responsibleEmployees as (employee as (id as integer, name as string), manager as (id as integer, name as string)), type as string, typeId as short)[], events as (time as string, type as string)[], grandAmount as double, grossAmount as double, groupInfo as (id as integer, label as string), guestCounting as (guests as double, mode as string), id as integer, isRefund as boolean, isTaxExemptApplied as boolean, items as (amount as double, categories as (id as short, name as string, type as string)[], createdOn as string, giftCard as boolean, id as integer, label as string, modifierInfo as (id as (id as short, label as string), type as string), netAmount as double, orderMode as (id as short, label as string), originalPrice as double, parentItemId as integer, period as (id as short, label as string), processedInKitchen as boolean, quantity as double, responsibleEmployeeId as integer, responsibleEmployees as (employee as (id as integer, name as string)), revenue as boolean, seat as boolean, typeId as integer)[], netAmount as double, payments as (amount as double, card as string, createdOn as string, id as integer, label as string, responsibleEmployees as (employee as (id as integer, name as string)), tip as double, type as string, typeId as short)[], period as (id as short, label as string), printedCheckId as integer, responsibleEmployees as (id as integer, isTippableEmployee as boolean, name as string, roleId as short, roleName as string, shiftId as boolean, time as string)[], revenueCenter as (id as short, label as string), surcharges as (accounting as string, amount as double, createdOn as string, id as string, label as string, linkedItems as integer[], rate as double, taxableSales as double, type as string, typeId as short)[], terminalId as short, total as double, training as boolean, voids as (amount as double, createdOn as string, id as string, label as string, linkedItems as (amount as double, id as integer)[], responsibleEmployees as (employee as (id as integer, name as string), manager as (id as integer, name as string)), type as string, typeId as short)[])[],\n\t\tdob as string,\n\t\tlink as string,\n\t\tmarker as string,\n\t\tmoreDataImmediatelyAvailable as string,\n\t\tstoreId as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument',\n\twildcardPaths:['FlattenIssueInput']) ~> InputJson\nInputJson foldDown(unroll(checks.payments, checks.payments),\n\tmapColumn(\n\t\tstoreId,\n\t\tprintedCheckId = checks.printedCheckId,\n\t\tpayments = checks.payments,\n\t\tdob\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenPayments\nFlattenPayments sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tstoreId,\n\t\tdob,\n\t\ttip = payments.tip,\n\t\ttype = payments.type,\n\t\tcard = payments.card,\n\t\tid = payments.id,\n\t\ttypeId = payments.typeId,\n\t\tlabel = payments.label,\n\t\tamount = payments.amount,\n\t\tcreatedOn = payments.createdOn,\n\t\t{responsibleEmployees.employee.id} = payments.responsibleEmployees.employee.id,\n\t\t{responsibleEmployees.employee.name} = payments.responsibleEmployees.employee.name,\n\t\tprintedCheckId\n\t)) ~> SinkChecksPayments"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xmldataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "currentOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tquizReport as ({@version} as short, {@xmlns} as string, {@xmlns:xsi} as string, {@xsi:schemaLocation} as string, groups as (group as ({@answeredQuestions} as short, {@awardedPercent} as double, {@awardedScore} as short, {@name} as string, {@passingPercent} as short, {@passingScore} as short, {@totalQuestions} as short)[]), questions as (fillInTheBlankQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correct} as boolean, {@userAnswer} as string, answer as string[])[], text as string[]), direction as (text as string), feedback as (text as string))[], hotspotQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, direction as (text as string), feedback as (text as string), hotspots as (freeform as ({@correct} as boolean, {@height} as double, {@label} as string, {@marked} as boolean, {@points} as string, {@width} as double, {@x} as double, {@y} as double)[]), userAnswer as (point as ({@x} as double, {@y} as double)[]))[], matchingQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, direction as (text as string), feedback as (text as string), matches as (match as ({@premiseIndex} as short, {@responseIndex} as short)[]), premises as (premise as (text as string)[]), responses as (response as (text as string)[]), userAnswer as (match as ({@premiseIndex} as short, {@responseIndex} as short)[]))[], multipleChoiceQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as boolean, answer as (text as string)[]), direction as (text as string), feedback as (text as string))[], multipleChoiceTextQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as short, answer as string[])[], text as string[]), direction as (text as string), feedback as (text as string))[], multipleResponseQuestion as ({@awardedPoints} as boolean, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as (answer as ({@correct} as boolean, {@selected} as boolean, text as string)[]), direction as (text as string), feedback as (text as string))[], numericQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, {@userAnswer} as short, answers as (equal as short), direction as (text as string), feedback as (text as string))[], sequenceQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as (answer as ({@originalIndex} as short, text as string)[]), direction as (text as string), feedback as (text as string))[], trueFalseQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, answers as ({@correctAnswerIndex} as boolean, {@userAnswerIndex} as boolean, answer as (text as boolean)[]), direction as (text as string), feedback as (text as string))[], typeInQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, {@userAnswer} as string, acceptableAnswers as (answer as string[]), direction as (text as string), feedback as (text as string))[], wordBankQuestion as ({@awardedPoints} as short, {@evaluationEnabled} as boolean, {@id} as string, {@maxAttempts} as boolean, {@maxPoints} as short, {@status} as string, {@usedAttempts} as boolean, details as (blank as ({@correct} as boolean, {@userAnswer} as string, {_value_} as string)[], text as string[]), direction as (text as string), feedback as (text as string), words as string)[]), quizSettings as ({@maxNormalizedScore} as short, {@maxScore} as short, {@quizType} as string, {@timeLimit} as boolean, passingPercent as short), summary as ({@finishTimestamp} as timestamp, {@passed} as boolean, {@percent} as short, {@score} as short, {@time} as short, variables as (variable as ({@name} as string, {@title} as string, {@value} as string))))\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'SourceFilename',\n\tformat: 'xml',\n\tfileSystem: 'adhocextract',\n\tvalidationMode: 'none',\n\tnamespaces: false,\n\twildcardPaths:['*.xml']) ~> source1\nsource1 foldDown(unroll(quizReport.questions.multipleChoiceQuestion, quizReport.questions.multipleChoiceQuestion),\n\tmapColumn(\n\t\tquestionid = quizReport.questions.multipleChoiceQuestion.{@id},\n\t\tQuestion = quizReport.questions.multipleChoiceQuestion.direction.text,\n\t\tstatus = quizReport.questions.multipleChoiceQuestion.{@status}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CDM_Repro_Pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CDM_Repro",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSubscriptionProfileRead": {},
									"AzureSubscriptionProfileOutEDL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-02-24T10:13:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CDM_load_issue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CDM_load_issue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-02-27T10:29:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CurrentJSONStream": {},
									"StagingJSONStream": {},
									"SinkDelta": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-02-07T08:53:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlattenIssueJustPayments')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "flattenIssueOnlyPayments",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flattenIssueJustPaymentsDF",
								"type": "DataFlowReference",
								"parameters": {
									"source_location": "'Inbound/Raw/NCR_Pulse/Sales/Stream/Incremental/20201119/2225'",
									"time_stamp": "''",
									"dob": "''",
									"batch_window": "''",
									"start_time": "''"
								},
								"datasetParameters": {
									"InputJson": {},
									"SinkChecksPayments": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-05T15:07:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flattenIssueJustPaymentsDF')]"
			]
		}
	]
}