{
	"name": "flattenIssueJustPaymentsDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "psi101002_20201119_2225",
						"type": "DatasetReference"
					},
					"name": "InputJson"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "csvOutput",
						"type": "DatasetReference"
					},
					"name": "SinkChecksPayments"
				}
			],
			"transformations": [
				{
					"name": "FlattenPayments"
				}
			],
			"script": "parameters{\n\tsource_location as string ('Inbound/Raw/NCR_Pulse/Sales/Stream/Incremental/20201119/2225'),\n\ttime_stamp as string (''),\n\tdob as string (''),\n\tbatch_window as string (''),\n\tstart_time as string ('')\n}\nsource(output(\n\t\tchecks as (clears as (amount as double, createdOn as string, id as string, label as string, linkedItems as (amount as double, id as integer)[], responsibleEmployees as (employee as (id as integer, name as string)), type as string, typeId as integer)[], closed as boolean, comps as (amount as double, createdOn as string, id as integer, label as string, linkedItems as (amount as double, id as integer)[], note as string, responsibleEmployees as (employee as (id as integer, name as string), manager as (id as integer, name as string)), type as string, typeId as short)[], events as (time as string, type as string)[], grandAmount as double, grossAmount as double, groupInfo as (id as integer, label as string), guestCounting as (guests as double, mode as string), id as integer, isRefund as boolean, isTaxExemptApplied as boolean, items as (amount as double, categories as (id as short, name as string, type as string)[], createdOn as string, giftCard as boolean, id as integer, label as string, modifierInfo as (id as (id as short, label as string), type as string), netAmount as double, orderMode as (id as short, label as string), originalPrice as double, parentItemId as integer, period as (id as short, label as string), processedInKitchen as boolean, quantity as double, responsibleEmployeeId as integer, responsibleEmployees as (employee as (id as integer, name as string)), revenue as boolean, seat as boolean, typeId as integer)[], netAmount as double, payments as (amount as double, card as string, createdOn as string, id as integer, label as string, responsibleEmployees as (employee as (id as integer, name as string)), tip as double, type as string, typeId as short)[], period as (id as short, label as string), printedCheckId as integer, responsibleEmployees as (id as integer, isTippableEmployee as boolean, name as string, roleId as short, roleName as string, shiftId as boolean, time as string)[], revenueCenter as (id as short, label as string), surcharges as (accounting as string, amount as double, createdOn as string, id as string, label as string, linkedItems as integer[], rate as double, taxableSales as double, type as string, typeId as short)[], terminalId as short, total as double, training as boolean, voids as (amount as double, createdOn as string, id as string, label as string, linkedItems as (amount as double, id as integer)[], responsibleEmployees as (employee as (id as integer, name as string), manager as (id as integer, name as string)), type as string, typeId as short)[])[],\n\t\tdob as string,\n\t\tlink as string,\n\t\tmarker as string,\n\t\tmoreDataImmediatelyAvailable as string,\n\t\tstoreId as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument',\n\twildcardPaths:['FlattenIssueInput']) ~> InputJson\nInputJson foldDown(unroll(checks.payments, checks.payments),\n\tmapColumn(\n\t\tstoreId,\n\t\tprintedCheckId = checks.printedCheckId,\n\t\tpayments = checks.payments,\n\t\tdob\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenPayments\nFlattenPayments sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\tstoreId,\n\t\tdob,\n\t\ttip = payments.tip,\n\t\ttype = payments.type,\n\t\tcard = payments.card,\n\t\tid = payments.id,\n\t\ttypeId = payments.typeId,\n\t\tlabel = payments.label,\n\t\tamount = payments.amount,\n\t\tcreatedOn = payments.createdOn,\n\t\t{responsibleEmployees.employee.id} = payments.responsibleEmployees.employee.id,\n\t\t{responsibleEmployees.employee.name} = payments.responsibleEmployees.employee.name,\n\t\tprintedCheckId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkChecksPayments"
		}
	}
}