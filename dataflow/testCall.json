{
	"name": "testCall",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ADLSGen2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "VaccinationAPICall",
					"linkedService": {
						"referenceName": "RestService1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "MapStatus"
				},
				{
					"name": "AddFolderPath"
				}
			],
			"scriptLines": [
				"parameters{",
				"     bearerToken as string,",
				"     fileSystem as string,",
				"     folderPath as string,",
				"     requestInterval as integer",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'adhocextract',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     folderPath: ($folderPath)) ~> source1",
				"source1 call(output(",
				"          headers as [string,string],",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     format: 'rest',",
				"     store: 'restservice',",
				"     timeout: 30,",
				"     requestInterval: ($requestInterval),",
				"     headers = ['Authorization' -> ($bearerToken), 'Content-Type' -> 'application/json+fhir'],",
				"     httpMethod: 'POST',",
				"     entity: 'Immunization',",
				"     headerColumnName: 'headers',",
				"     statusColumnName: 'status',",
				"     addResponseCode: true,",
				"     requestFormat: ['type' -> 'json'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> VaccinationAPICall",
				"VaccinationAPICall derive(status = regexExtract(toString(byName('status')), '(\\\\d+)')) ~> MapStatus",
				"MapStatus derive(resultFolder = concat($folderPath, '/result/', status)) ~> AddFolderPath",
				"AddFolderPath sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowFolderUrlColumn:'resultFolder',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1,",
				"     fileSystem: ($fileSystem),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1"
			]
		}
	}
}